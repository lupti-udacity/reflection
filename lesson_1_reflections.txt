How did viewing a diff between two versions of a file help you see the bug that
was introduced?

It shows the lines from old version along with the new version with any unmatched ASCII text or characters. With that you can easily pinpoint the differences betweenthese two files.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

It allows you to examin the incremental changes over the entire history of the file.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

Pros: Manually choosing when to comit by the user will probably make the number of versions less frequent than the automatic versioning;
Manually versioning may provide a good view of the logical grouping of the changes whereas the automatic versioning cannot.

Cons: Manually versioning may risk of losing a significant amount of work if the commit was not frequent enough. Auomatic versioning can be a life safer in case of system crash in the middle of editing.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

It all depends on the purpose of the apps. Git version control was designed to handle projects with mulitple cohesive comitted files and with different branches for different releases. The Google Docs is intended for the general document processing tool which may not intended for large project with possible dependancies on each other.

How can you use the commands git log and git diff to view the history of files?

git log shows the operational commit history whereas the git diff shows the differences between two versions of same file authored in different times.

How might using version control make you more confident to make changes that
could break something?

Version control keeps track of incremental changes happened between committed and updated. Therefore it is always possible to retreive the working version prior buggy version.

Now that you have your workspace set up, what do you want to try using Git for?

Use Git Hub at remote site for safe keeping of different versions of my project as the project progresses. Use sublime to do the code changes with all the neat visual features that I have set up in this workplace. This newly setup workplace will be my favorite working area for the program development and testing, checkin and checkout codes from GitHub. 